'''1. Definirajte korutinu koja će simulirati dohvaćanje podataka s weba. Podaci neka budu lista
brojeva od 1 do 10 koju ćete vratiti nakon 3 sekunde. Listu brojeva definirajte comprehensionom.
Nakon isteka vremena, u korutinu ispišite poruku "Podaci dohvaćeni." i vratite podatke. Riješite bez
korištenja asyncio.gather() i asyncio.create_task() funkcija.
'''
import asyncio

async def dohvat_podataka():
    print("Pokrenuto dohvaćanje podataka...")
    await asyncio.sleep(3)
    podaci = [broj for broj in range(1, 11)] 
    print("Podaci dohvaćeni.")
    return podaci

async def main():
    rezultat = await dohvat_podataka()
    print(f"Dohvaćeni podaci: {rezultat}")

asyncio.run(main())



'''
2. Definirajte dvije korutine koje će simulirati dohvaćanje podataka s weba. Prva korutina neka vrati
listu proizvoljnih rječnika (npr. koji reprezentiraju podatke o korisnicima) nakon 3 sekunde, a druga
korutina neka vrati listu proizvoljnih rječnika (npr. koji reprezentiraju podatke o proizvodima) nakon 5
sekundi. Korutine pozovite konkurentno korištenjem asyncio.gather() i ispišite rezultate. Program
se mora izvršavati ~5 sekundi. '''
import asyncio

async def dohvacanje_podataka():
    await asyncio.sleep(3)
    podaci_korisnici = [
        {'ime': 'Leon', 'prezime': 'Peric', 'posao': 'Programer'},
        {'ime': 'Antonela', 'prezime': 'Med', 'posao': 'HR'}
    ]
    return podaci_korisnici


async def dohvacanje_podataka2():
    await asyncio.sleep(5)
    podaci_proizvodi = [
        {'naziv': 'WebApp', 'ime': 'F3'},
        {'naziv': 'PiApp', 'ime': 'F6'}
    ]
    return podaci_proizvodi


async def main():
 
    korisnici, proizvodi = await asyncio.gather(
        dohvacanje_podataka(),
        dohvacanje_podataka2()
    )
    
    print("Rezultati dohvaćanja:")
    print("Korisnici:", korisnici)
    print("Proizvodi:", proizvodi)

asyncio.run(main())

'''
3. Definirajte korutinu autentifikacija() koja će simulirati autentifikaciju korisnika na
poslužiteljskoj strani. Korutina kao ulazni parametar prima rječnik koji opisuje korisnika, a sastoji se
od ključeva korisnicko_ime , email i lozinka . Unutar korutine simulirajte provjeru korisničkog
imena na način da ćete provjeriti nalaze li se par korisnicko_ime i email u bazi korisnika. Ova
provjera traje 3 sekunde.
Ako se korisnik ne nalazi u bazi, vratite poruku "Korisnik {korisnik} nije pronađen."
Ako se korisnik nalazi u bazi, potrebno je pozvati vanjsku korutinu autorizacija() koja će simulirati
autorizaciju korisnika u trajanju od 2 sekunde. Funkcija kao ulazni parametar prima rječnik korisnika iz baze
i lozinku proslijeđenu iz korutine autentifikacija() . Autorizacija simulira dekripciju lozinke (samo
provjerite podudaranje stringova) i provjeru s lozinkom iz baze_lozinka. Ako su lozinke jednake, korutine
vraća poruku "Korisnik {korisnik}: Autorizacija uspješna." , a u suprotnom "Korisnik
{korisnik}: Autorizacija neuspješna." 

Korutinu autentifikacija() pozovite u main() funkciji s proizvoljnim korisnikom i lozinkom.
baza_korisnika = [
{'korisnicko_ime': 'mirko123', 'email': 'mirko123@gmail.com'},
{'korisnicko_ime': 'ana_anic', 'email': 'aanic@gmail.com'},
{'korisnicko_ime': 'maja_0x', 'email': 'majaaaaa@gmail.com'},
{'korisnicko_ime': 'zdeslav032', 'email': 'deso032@gmail.com'}
]

baza_lozinka = [
{'korisnicko_ime': 'mirko123', 'lozinka': 'lozinka123'},
{'korisnicko_ime': 'ana_anic', 'lozinka': 'super_teska_lozinka'},
{'korisnicko_ime': 'maja_0x', 'lozinka': 's324SDFfdsj234'},
{'korisnicko_ime': 'zdeslav032', 'lozinka': 'deso123'}
]
'''
import asyncio

baza_korisnika = [
    {'korisnicko_ime': 'mirko123', 'email': 'mirko123@gmail.com'},
    {'korisnicko_ime': 'ana_anic', 'email': 'aanic@gmail.com'},
    {'korisnicko_ime': 'maja_0x', 'email': 'majaaaaa@gmail.com'},
    {'korisnicko_ime': 'zdeslav032', 'email': 'deso032@gmail.com'}
]

baza_lozinka = [
    {'korisnicko_ime': 'mirko123', 'lozinka': 'lozinka123'},
    {'korisnicko_ime': 'ana_anic', 'lozinka': 'super_teska_lozinka'},
    {'korisnicko_ime': 'maja_0x', 'lozinka': 's324SDFfdsj234'},
    {'korisnicko_ime': 'zdeslav032', 'lozinka': 'deso123'}
]

# autorizacija
async def autorizacija(korisnik_baza, unesena_lozinka):
    print(f"Simulacija autorizacije korisnika: {korisnik_baza['korisnicko_ime']}...")
    await asyncio.sleep(2)

    if korisnik_baza["lozinka"] == unesena_lozinka:
        print(f"Korisnik {korisnik_baza['korisnicko_ime']}: Autorizacija uspješna.")
        return f"Korisnik {korisnik_baza['korisnicko_ime']}: Autorizacija uspješna."
    else:
        print(f"Korisnik {korisnik_baza['korisnicko_ime']}: Autorizacija neuspješna.")
        return f"Korisnik {korisnik_baza['korisnicko_ime']}: Autorizacija neuspješna."

# autentifiikacija
async def autentifikacija(korisnik):
    print(f"Započinjem autentifikaciju korisnika: {korisnik['korisnicko_ime']} sa emailom: {korisnik['email']}...")
    await asyncio.sleep(3)

    for zapis in baza_korisnika:
        if zapis["korisnicko_ime"] == korisnik["korisnicko_ime"] and zapis["email"] == korisnik["email"]:
            print("Autentifikacija uspješna!")
            
            # Pronađi lozinku iz baze
            korisnik_baza = next((loz for loz in baza_lozinka if loz["korisnicko_ime"] == korisnik["korisnicko_ime"]), None)
            if korisnik_baza:
                return await autorizacija(korisnik_baza, korisnik["lozinka"])

    print(f"Korisnik {korisnik['korisnicko_ime']} nije pronađen.")
    return f"Korisnik {korisnik['korisnicko_ime']} nije pronađen."

async def main():
    # Proizvoljan korisnik za provjeru
    korisnik_za_provjeru = {"korisnicko_ime": "mirko123", "email": "mirko123@gmail.com", "lozinka": "lozinka123"}
    rezultat = await autentifikacija(korisnik_za_provjeru)
    print(f"Rezultat autentifikacije: {rezultat}")

asyncio.run(main())


'''
4. Definirajte korutinu provjeri_parnost koja će simulirati "super zahtjevnu operaciju" provjere
parnosti broja putem vanjskog API-ja. Korutina prima kao argument broj za koji treba provjeriti
parnost, a vraća poruku "Broj {broj} je paran." ili "Broj {broj} je neparan." nakon 2 sekunde.
Unutar main funkcije definirajte listu 10 nasumičnih brojeva u rasponu od 1 do 100 (koristite random
modul). Listu brojeva izgradite kroz list comprehension sintaksu. Nakon toga, pohranite u listu zadaci
10 Task objekata koji će izvršavati korutinu provjeri_parnost za svaki broj iz liste (također kroz list
comprehension). Na kraju, koristeći asyncio.gather() , pokrenite sve korutine konkurentno i ispišite
rezultate.'''


import random 

async def provjeri_parnost(broj):
  await asyncio.sleep(2)
  if broj % 2 == 0:
    return f"Broj {broj} je paran."
  else:
     return f"Broj {broj} je naperan."


async def main():
    
    brojevi = [random.randint(1, 100) for _ in range(10)] 
    tasks = [provjeri_parnost(broj) for broj in brojevi]
    rezultati = await asyncio.gather(*tasks)
    
    for rezultat in rezultati:
        print(rezultat)


asyncio.run(main())

'''5. Definirajte korutinu secure_data koja će simulirati enkripciju osjetljivih podataka. Kako se u
praksi enkripcija radi na poslužiteljskoj strani, korutina će simulirati enkripciju podataka u trajanju od 3
sekunde. Korutina prima kao argument rječnik osjetljivih podataka koji se sastoji od ključeva prezime ,
broj_kartice i CVV . Definirajte listu s 3 rječnika osjetljivih podataka. Pohranite u listu zadaci kao u
prethodnom zadatku te pozovite zadatke koristeći asyncio.gather() . Korutina secure_data mora za
svaki rječnik vratiti novi rječnik u obliku: {'prezime': prezime , 'broj_kartice': 'enkriptirano',
'CVV': 'enkriptirano'} . Za fake enkripciju koristite funkciju hash(str) koja samo vraća hash
vrijednost ulaznog stringa.'''

async def secure_data(podaci):
    await asyncio.sleep(3)
    enkriptirani_podaci = {
        "prezime": podaci['prezime'],
        "broj_kartice": hash(podaci['broj_kartice']),
        "CVV": hash(podaci["CVV"])
    }
    print(f"Završena enkripcija za prezime: {podaci['prezime']}")
    return enkriptirani_podaci

async def main():
    podaci_lista = [
        {'prezime': "Perić", 'broj_kartice': "1234567812345678", 'CVV': "123"},
        {'prezime': "Anić", 'broj_kartice': "9876543298765432", 'CVV': "456"},
        {'prezime': "Marić", 'broj_kartice': "5555444433332222", 'CVV': "789"}
    ]
    
    tasks = [secure_data(podaci) for podaci in podaci_lista]

    rezultati = await asyncio.gather(*tasks)
    
    for rezultat in rezultati:
        print(rezultat)

asyncio.run(main())

